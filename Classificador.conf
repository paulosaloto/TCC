///////////////////////////////////////////////////////////////////////////////
/////////                                                            //////////
/////////                        ROBERTA ROBÔ                        //////////
/////////                                                            //////////
/////////       Um robô animatrônico com movimentos definidos        //////////
/////////       automaticamente a partir de um sinal de fala.        //////////
/////////                                                            //////////
/////////               Trabalho de Conclusão de Curso               //////////
/////////                 Engenharia Elétrica - Ifes                 //////////
/////////                                                            //////////
/////////                * Paulo Gomes Saloto, 2017 *                //////////
/////////                   paulosaloto@gmail.com                    //////////
/////////                                                            //////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/////////           	  Declaração dos componentes    	         //////////
///////////////////////////////////////////////////////////////////////////////

[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[waveIn].type=cWaveSource
instance[fr25].type=cFramer
instance[energy].type=cEnergy
instance[turn].type=cTurnDetector
instance[fr50].type=cFramer
instance[w50].type=cWindower
instance[fft50].type=cTransformFFT
instance[fftmagphase50].type=cFFTmagphase
instance[acf50].type=cAcf
instance[cepstrum50].type=cAcf
instance[pitchACF].type=cPitchACF
instance[pe].type=cVectorPreemphasis
instance[win].type=cWindower
instance[fft].type=cTransformFFT
instance[fftmagphase].type=cFFTmagphase
instance[mspec].type=cMelspec
instance[mfcc].type=cMfcc
instance[lpc].type=cLpc
instance[lsp].type=cLsp
instance[mzcr].type=cMZcr
instance[intens].type=cIntensity
instance[lld].type=cContourSmoother
instance[delta1].type=cDeltaRegression
instance[functL1].type=cFunctionals
instance[spectral].type=cSpectral
instance[specFunc].type=cFunctionals
;instance[turnDump].type=cWaveSinkCut
instance[emoPredict].type=cLibsvmLiveSink
instance[csv].type=cCsvSink

nThreads=1
printLevelStats=0


///////////////////////////////////////////////////////////////////////////////
/////////           	Configuração dos componentes    	         //////////
///////////////////////////////////////////////////////////////////////////////

[waveIn:cWaveSource]
writer.dmLevel=wave
filename=\cm[inputfile(I){test.wav}:name of input file]
monoMixdown = 1
properTimestamps = 1
start = 0.0
end = -1

//////////////////////////////////////////////////////////////////////////////
////                          	  FRAMES 50ms                            /////
//////////////////////////////////////////////////////////////////////////////

[fr50:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames50
frameSize = 0.040
frameStep = 0.010
frameMode = fixed
frameCenterSpecial = center

[w50:cWindower]
reader.dmLevel=frames50
writer.dmLevel=win50frame
copyInputName = 1
processArrayFields = 1
winFunc = ham
gain = 1.0
offset = 0

[fft50:cTransformFFT]
reader.dmLevel=win50frame
writer.dmLevel=fftc50
copyInputName = 1
processArrayFields = 1
inverse = 0

[fftmagphase50:cFFTmagphase]
reader.dmLevel=fftc50
writer.dmLevel=fftmag50
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[acf50:cAcf]
reader.dmLevel=fftmag50
writer.dmLevel=acf50
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 0
acfCepsNormOutput = 0

[cepstrum50:cAcf]
reader.dmLevel=fftmag50
writer.dmLevel=cepstrum50
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 1
acfCepsNormOutput = 0
oldCompatCepstrum = 1
absCepstrum = 1

[pitchACF:cPitchACF]
reader.dmLevel=acf50;cepstrum50
writer.dmLevel=pitch
processArrayFields=0
maxPitch = 500
voiceProb = 1
voiceQual = 0
HNR = 0
F0 = 1
F0raw = 0
F0env = 1
voicingCutoff = 0.400

//////////////////////////////////////////////////////////////////////////////
////                          	  FRAMES 50ms                            /////
//////////////////////////////////////////////////////////////////////////////

[fr25:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
frameSize = 0.025
frameStep = 0.010
frameMode = fixed
frameCenterSpecial = center

[pe:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
copyInputName = 1
processArrayFields = 1
k=0.97

[win:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframe
copyInputName = 1
processArrayFields = 1
winFunc = ham
gain = 1.0
offset = 0

[fft:cTransformFFT]
reader.dmLevel=winframe
writer.dmLevel=fftc
copyInputName = 1
processArrayFields = 1
inverse = 0

[fftmagphase:cFFTmagphase]
reader.dmLevel=fftc
writer.dmLevel=fftmag
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[mspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=mspec1
copyInputName = 1
processArrayFields = 1
htkcompatible = 1
nBands = 26
lofreq = 0
hifreq = 8000
usePower = 1
inverse = 0
specScale = mel

[mfcc:cMfcc]
reader.dmLevel=mspec1
writer.dmLevel=mfcc1
copyInputName = 0
processArrayFields = 1
firstMfcc = 1
lastMfcc =  12
cepLifter = 22.0
htkcompatible = 1

[lpc:cLpc]
reader.dmLevel=framespe
writer.dmLevel=lpc
copyInputName = 1
processArrayFields = 1
method = acf
p = 8
saveLPCoeff = 1
lpGain = 0
saveRefCoeff = 0
residual = 0
forwardFilter = 0
lpSpectrum = 0

[lsp:cLsp]
reader.dmLevel=lpc
writer.dmLevel=lsp
copyInputName = 1
processArrayFields = 0

[intens:cIntensity]
reader.dmLevel=frames
writer.dmLevel=intens
copyInputName = 1
processArrayFields = 1
intensity=1
loudness =1

[mzcr:cMZcr]
reader.dmLevel=frames
writer.dmLevel=mzcr
copyInputName = 1
processArrayFields = 1
zcr = 1
amax = 0
mcr = 0
maxmin = 0
dc = 0

//////////////////////////////////////////////////////////////////////////////
//////  	 EXTRAÇÃO DE CARACTERÍSTICAS PARA DETECÇÃO DE EMOÇÕES   	//////
//////////////////////////////////////////////////////////////////////////////

[lld:cContourSmoother]
reader.dmLevel=intens;mfcc1;lsp;mzcr;pitch
writer.dmLevel=lld
writer.levelconf.nT = 2500
writer.levelconf.isRb=1
writer.levelconf.growDyn=0
nameAppend = sma
copyInputName = 1
noPostEOIprocessing = 0
smaWin = 3

[delta1:cDeltaRegression]
reader.dmLevel=lld
writer.dmLevel=lld_de
blocksize=1
writer.levelconf.nT = 2500
writer.levelconf.isRb=1
writer.levelconf.growDyn=0
nameAppend = de
copyInputName = 1
noPostEOIprocessing = 0
deltawin=2

 [energy:cEnergy]
reader.dmLevel=winframe
writer.dmLevel=energy
rms=1
log=0

// the voice activity detection (turn detector)
[turn:cTurnDetector]
reader.dmLevel=energy
writer.dmLevel=isTurn
messageRecp = functL1
eventRecp = turnDump
maxTurnLength = 2
maxTurnLengthGrace = 1
idx = 0
nPost = 10
nPre = 10
useRMS = 1
autoThreshold = 0
threshold = 0.0005

[functL1:cFunctionals]
reader.dmLevel=lld;lld_de
writer.dmLevel=func
copyInputName = 1
 ; frameMode = var will enable the functionals component to listen for messages from the turn detector
frameMode = var
functionalsEnabled=Extremes;Regression;Moments;Percentiles
Extremes.max = 1
Extremes.min = 1
Extremes.range = 1
Extremes.maxpos = 1
Extremes.minpos = 1
Extremes.amean = 1
Extremes.maxameandist = 0
Extremes.minameandist = 0
Extremes.norm = frame
Regression.linregc1 = 1
Regression.linregc2 = 1
Regression.linregerrA = 1
Regression.linregerrQ = 1
Regression.qregc1 = 0
Regression.qregc2 = 0
Regression.qregc3 = 0
Regression.qregerrA = 0
Regression.qregerrQ = 0
Regression.centroid = 0
Moments.variance = 0
Moments.stddev = 1
Moments.skewness = 1
Moments.kurtosis = 1
Moments.amean = 0
Percentiles.quartiles = 1
Percentiles.iqr = 1

//////////////////////////////////////////////////////////////////////////////
//////	 EXTRAÇÃO DE CARACTERÍSTICAS PARA DETECÇÃO DE ALTURAS VOCAIS 	//////
//////////////////////////////////////////////////////////////////////////////

[spectral:cSpectral]
reader.dmLevel=fftmag
writer.dmLevel=spectral
copyInputName = 1
processArrayFields = 1
squareInput = 1
bands[0]=100-350
bands[1]=300-500
bands[2]=500-700
bands[3]=700-900
flux = 1				//BOM PARA DETECTAR OS MOMENTOS DE FALA
centroid = 0
maxPos = 0
minPos = 0
entropy = 0
skewness = 0
kurtosis = 0

[specFunc:cFunctionals]
reader.dmLevel=spectral
writer.dmLevel=funcAlturas
copyInputName = 1
frameMode = fixed
frameSizeFrames = 5
frameStepFrames = 5
functionalsEnabled=Means
Means.amean = 1
Means.absmean = 0
Means.qmean = 0
Means.nzamean = 0
Means.nzqmean = 0
Means.nzgmean = 0
Means.nnz = 0
Means.nzabsmean = 0

//////////////////////////////////////////////////////////////////////////////
//////	CLASSIFICAÇÃO DOS VALORES OBTIDOS EXPORTADOS EM ARQUIVOS *.CSV  //////
//////////////////////////////////////////////////////////////////////////////

[turnDump:cWaveSinkCut]
reader.dmLevel = frames

[arffsink:cArffSink]
reader.dmLevel=func
number=1
filename=\cm[arffout(O){output.arff}:name of WEKA Arff output file]
relation=\cm[corpus{SMILEfeaturesLive}:corpus name, arff relation]
instanceBase=liveturn
class[0].name = emotion
class[0].type = \cm[classes{unknown}:all classes for arff file attribute]
target[0].all = \cm[classlabel{unassigned}:instance class label]
append=0

[emoPredict:cLibsvmLiveSink]
reader.dmLevel=func
model=../libsvm-3.21/tools/emocoes0711sf.lsvm.model
scale=../libsvm-3.21/tools/emocoes0711sf.lsvm.range
;classes=scripts/modeltrain/work/emocoes0711sf/emocoes0711sf.classes
printResult=1
resultRecp = funcAlturas
predictProbability=1
printParseableResult=0
saveResult=arquivos/resultadoEmo.csv
forceScale = 0


[csv:cCsvSink]
reader.dmLevel=funcAlturas
filename=\cm[CSV(X){arquivos/resultadoAlt.csv}: nome do arquivo de saída]
append=0
printHeader=0
timestamp = 1
number = 0
delimChar = <tab>
//////---------------------- END -------------------------///////
